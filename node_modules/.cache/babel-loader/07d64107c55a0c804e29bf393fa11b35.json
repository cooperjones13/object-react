{"ast":null,"code":"import _slicedToArray from \"/Users/cooperjones/Documents/_Object/mlb-final-project-react/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/cooperjones/Documents/_Object/mlb-final-project-react/src/Stats.js\";\nimport React, { useState, useEffect } from 'react';\nimport SeasonRecord from './SeasonRecord';\nimport PostseasonResults from './PostseasonResults';\nimport RunCounts from './RunCounts';\nimport TopPlayers from './TopPlayers';\nimport AboutTeam from './AboutTeam';\nimport axios from 'axios';\nexport default function Stats({\n  theme,\n  id,\n  year,\n  teamStatsUrl,\n  division,\n  teamInfo\n}) {\n  // const [teamInfoUrl, setTeamInfoUrl] = useState(\"http://statsapi.mlb.com/api/v1/standings/regularSeason?leagueId=103,104&season=\" + year);\n  // console.log(id +\" \" + year);\n  const _useState = useState({\n    \"wins\": \"-\",\n    \"losses\": \"-\",\n    \"winningPercentage\": \"-\",\n    \"leagueGamesBack\": \"-\",\n    \"clinchIndicator\": \"\",\n    \"records\": {\n      \"splitRecords\": [{\n        \"wins\": \"\",\n        \"losses\": \"\"\n      }, {\n        \"wins\": \"\",\n        \"losses\": \"\"\n      }, {\n        \"wins\": \"\",\n        \"losses\": \"\"\n      }, {\n        \"wins\": \"\",\n        \"losses\": \"\"\n      }, {\n        \"wins\": \"\",\n        \"losses\": \"\"\n      }]\n    }\n  }),\n        _useState2 = _slicedToArray(_useState, 2),\n        stats = _useState2[0],\n        setStats = _useState2[1];\n\n  useEffect(() => {\n    // console.log(teamInfoUrl);\n    let cancel;\n    axios.get(teamStatsUrl, {\n      cancelToken: new axios.CancelToken(c => cancel = c)\n    }).then(res => {\n      // console.log(teamInfoUrl);\n      // console.log(res.data.records);\n      for (var i = 0; i < res.data.records.length; i++) {\n        for (var j = 0; j < res.data.records[i].teamRecords.length; j++) {\n          // console.log(res.data.records[i].teamRecords[j].team.id + \": \");\n          // console.log(typeof res.data.records[i].teamRecords[j].team.id);\n          // console.log(typeof id);\n          if (res.data.records[i].teamRecords[j].team.id === parseInt(id)) {\n            console.log(\"match\");\n            setStats(res.data.records[i].teamRecords[j]);\n          }\n        }\n      }\n    }).catch(err => {\n      setStats({\n        \"wins\": \"-\",\n        \"losses\": \"-\",\n        \"winningPercentage\": \"-\",\n        \"leagueGamesBack\": \"-\",\n        \"clinchIndicator\": \"\",\n        \"records\": {\n          \"splitRecords\": [{\n            \"wins\": \"\",\n            \"losses\": \"\"\n          }, {\n            \"wins\": \"\",\n            \"losses\": \"\"\n          }, {\n            \"wins\": \"\",\n            \"losses\": \"\"\n          }, {\n            \"wins\": \"\",\n            \"losses\": \"\"\n          }, {\n            \"wins\": \"\",\n            \"losses\": \"\"\n          }]\n        }\n      }); // console.log(err.message);\n      // return err.message;\n    });\n    return () => cancel();\n  }, [year, id, teamStatsUrl]); // console.log(stats);\n  // const stats_being_displayed = [{'display': 'Games Played', 'key': 'gamesPlayed'}, {'display': 'Wins', 'key': 'wins'}, {'display': 'Losses', 'key': 'losses'}, {'display': 'Win %', 'key': 'winningPercentage'}, {'display': 'Runs Allowed', 'key': 'runsAllowed'}, {'display': 'Runs Scored', 'key': 'runsScored'}, {'display': 'Division Rank', 'key': 'divisionRank'}, {'display': 'League Rank', 'key': 'leagueRank'}, {'display': 'Sport Rank', 'key': 'sportRank'}]\n  // if(loading) return 0;\n\n  return React.createElement(\"div\", {\n    className: \"stats-container\",\n    style: {\n      \"backgroundColor\": theme.lightColor\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, React.createElement(SeasonRecord, {\n    theme: theme,\n    stats: stats,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }), React.createElement(RunCounts, {\n    theme: theme,\n    stats: stats,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"stat-block\",\n    id: \"best-players\",\n    style: {\n      \"backgroundColor\": theme.accentColor\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, React.createElement(TopPlayers, {\n    group: \"hitting\",\n    theme: theme,\n    teamId: id,\n    season: year,\n    title: \"Top Batters by AVG\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }), React.createElement(TopPlayers, {\n    group: \"pitching\",\n    theme: theme,\n    teamId: id,\n    season: year,\n    title: \"Top Pitcher by ERA\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }), React.createElement(TopPlayers, {\n    group: \"fielding\",\n    theme: theme,\n    teamId: id,\n    season: year,\n    title: \"Top Fielders by %\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  })), React.createElement(PostseasonResults, {\n    theme: theme,\n    teamId: id,\n    season: year,\n    stats: stats,\n    division: teamInfo.division.name,\n    league: teamInfo.league.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }), React.createElement(AboutTeam, {\n    theme: theme,\n    teamId: id,\n    season: year,\n    teamInfo: teamInfo,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }));\n}","map":{"version":3,"sources":["/Users/cooperjones/Documents/_Object/mlb-final-project-react/src/Stats.js"],"names":["React","useState","useEffect","SeasonRecord","PostseasonResults","RunCounts","TopPlayers","AboutTeam","axios","Stats","theme","id","year","teamStatsUrl","division","teamInfo","stats","setStats","cancel","get","cancelToken","CancelToken","c","then","res","i","data","records","length","j","teamRecords","team","parseInt","console","log","catch","err","lightColor","accentColor","name","league"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport SeasonRecord from './SeasonRecord';\nimport PostseasonResults from './PostseasonResults';\nimport RunCounts from './RunCounts';\nimport TopPlayers from './TopPlayers';\nimport AboutTeam from './AboutTeam';\nimport axios from 'axios';\n\nexport default function Stats({theme, id, year, teamStatsUrl, division, teamInfo}){\n  // const [teamInfoUrl, setTeamInfoUrl] = useState(\"http://statsapi.mlb.com/api/v1/standings/regularSeason?leagueId=103,104&season=\" + year);\n  // console.log(id +\" \" + year);\n  const [stats, setStats] = useState({\n    \"wins\":\"-\",\n    \"losses\":\"-\",\n    \"winningPercentage\":\"-\",\n    \"leagueGamesBack\":\"-\",\n    \"clinchIndicator\":\"\",\n    \"records\":{\n      \"splitRecords\":[{\"wins\":\"\",\"losses\":\"\"},{\"wins\":\"\",\"losses\":\"\"},{\"wins\":\"\",\"losses\":\"\"},{\"wins\":\"\",\"losses\":\"\"},{\"wins\":\"\",\"losses\":\"\"}]\n    }\n  });\n\n  useEffect(() => { \n    // console.log(teamInfoUrl);\n    let cancel;\n    axios.get(teamStatsUrl, {\n      cancelToken: new axios.CancelToken(c => cancel = c)\n    })\n    .then(res => {\n      // console.log(teamInfoUrl);\n      // console.log(res.data.records);\n      for(var i = 0; i < res.data.records.length; i++){\n        for(var j = 0; j<res.data.records[i].teamRecords.length; j++){\n          // console.log(res.data.records[i].teamRecords[j].team.id + \": \");\n          // console.log(typeof res.data.records[i].teamRecords[j].team.id);\n          // console.log(typeof id);\n          if(res.data.records[i].teamRecords[j].team.id === parseInt(id)){\n            console.log(\"match\");\n            setStats(res.data.records[i].teamRecords[j]);\n          }\n        }\n      }\n    })\n    .catch(err =>{\n      setStats({\n        \"wins\":\"-\",\n        \"losses\":\"-\",\n        \"winningPercentage\":\"-\",\n        \"leagueGamesBack\":\"-\",\n        \"clinchIndicator\":\"\",\n        \"records\":{\n          \"splitRecords\":[{\"wins\":\"\",\"losses\":\"\"},{\"wins\":\"\",\"losses\":\"\"},{\"wins\":\"\",\"losses\":\"\"},{\"wins\":\"\",\"losses\":\"\"},{\"wins\":\"\",\"losses\":\"\"}]\n        }\n      });\n      // console.log(err.message);\n      // return err.message;\n    })\n    return () => cancel()\n  }, [year, id, teamStatsUrl])\n  // console.log(stats);\n  // const stats_being_displayed = [{'display': 'Games Played', 'key': 'gamesPlayed'}, {'display': 'Wins', 'key': 'wins'}, {'display': 'Losses', 'key': 'losses'}, {'display': 'Win %', 'key': 'winningPercentage'}, {'display': 'Runs Allowed', 'key': 'runsAllowed'}, {'display': 'Runs Scored', 'key': 'runsScored'}, {'display': 'Division Rank', 'key': 'divisionRank'}, {'display': 'League Rank', 'key': 'leagueRank'}, {'display': 'Sport Rank', 'key': 'sportRank'}]\n  // if(loading) return 0;\n  return(\n    <div className=\"stats-container\" style={{\"backgroundColor\":theme.lightColor}}>\n      <SeasonRecord theme={theme} stats={stats}/>\n      <RunCounts theme={theme} stats={stats}/>\n      <div className=\"stat-block\" id=\"best-players\" style={{\"backgroundColor\":theme.accentColor}}>\n        <TopPlayers group=\"hitting\" theme={theme} teamId={id} season={year} title=\"Top Batters by AVG\"/>\n        <TopPlayers group=\"pitching\" theme={theme} teamId={id} season={year} title=\"Top Pitcher by ERA\"/>\n        <TopPlayers group=\"fielding\" theme={theme} teamId={id} season={year} title=\"Top Fielders by %\"/>\n      </div>\n      <PostseasonResults theme={theme} teamId={id} season={year} stats={stats} division={teamInfo.division.name} league={teamInfo.league.name}/>\n      <AboutTeam theme={theme} teamId={id} season={year} teamInfo={teamInfo}/>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}