{"ast":null,"code":"import _slicedToArray from \"/Users/cooperjones/Documents/_Object/mlb-final-project-react/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/cooperjones/Documents/_Object/mlb-final-project-react/src/Stats.js\";\nimport React, { useState, useEffect } from 'react';\nimport StatBlock from './StatBlock';\nimport SeasonRecord from './SeasonRecord';\nimport axios from 'axios';\nexport default function Stats({\n  theme,\n  id,\n  year,\n  teamInfoUrl\n}) {\n  // const [teamInfoUrl, setTeamInfoUrl] = useState(\"http://statsapi.mlb.com/api/v1/standings/regularSeason?leagueId=103,104&season=\" + year);\n  // console.log(id +\" \" + year);\n  const _useState = useState({\n    \"wins\": \"-\",\n    \"losses\": \"-\",\n    \"winningPercentage\": \"-\",\n    \"leagueGamesBack\": \"-\",\n    \"records\": {\n      \"splitRecords\": [{\n        \"wins\": \"\",\n        \"losses\": \"\"\n      }, {\n        \"wins\": \"\",\n        \"losses\": \"\"\n      }, {\n        \"wins\": \"\",\n        \"losses\": \"\"\n      }, {\n        \"wins\": \"\",\n        \"losses\": \"\"\n      }, {\n        \"wins\": \"\",\n        \"losses\": \"\"\n      }]\n    }\n  }),\n        _useState2 = _slicedToArray(_useState, 2),\n        stats = _useState2[0],\n        setStats = _useState2[1];\n\n  const _useState3 = useState(true),\n        _useState4 = _slicedToArray(_useState3, 2),\n        loading = _useState4[0],\n        setLoading = _useState4[1];\n\n  useEffect(() => {\n    setLoading(true); // console.log(teamInfoUrl);\n\n    let cancel;\n    axios.get(teamInfoUrl, {\n      cancelToken: new axios.CancelToken(c => cancel = c)\n    }).then(res => {\n      setLoading(false); // console.log(teamInfoUrl);\n      // console.log(res.data.records);\n\n      for (var i = 0; i < res.data.records.length; i++) {\n        for (var j = 0; j < res.data.records[i].teamRecords.length; j++) {\n          // console.log(res.data.records[i].teamRecords[j].team.id + \": \");\n          // console.log(typeof res.data.records[i].teamRecords[j].team.id);\n          // console.log(typeof id);\n          if (res.data.records[i].teamRecords[j].team.id === parseInt(id)) {\n            console.log(\"match\");\n            setStats(res.data.records[i].teamRecords[j]);\n          }\n        }\n      }\n    }).catch(err => {\n      setLoading(false);\n      setStats({\n        \"wins\": \"\",\n        \"losses\": \"\",\n        \"winningPercentage\": \"\",\n        \"leagueGamesBack\": \"\",\n        \"records\": {\n          \"splitRecords\": [{\n            \"wins\": \"\",\n            \"losses\": \"\"\n          }, {\n            \"wins\": \"\",\n            \"losses\": \"\"\n          }, {\n            \"wins\": \"\",\n            \"losses\": \"\"\n          }, {\n            \"wins\": \"\",\n            \"losses\": \"\"\n          }, {\n            \"wins\": \"\",\n            \"losses\": \"\"\n          }]\n        }\n      }); // console.log(err.message);\n      // return err.message;\n    });\n    return () => cancel();\n  }, [year, id]); // console.log(stats);\n  // const stats_being_displayed = [{'display': 'Games Played', 'key': 'gamesPlayed'}, {'display': 'Wins', 'key': 'wins'}, {'display': 'Losses', 'key': 'losses'}, {'display': 'Win %', 'key': 'winningPercentage'}, {'display': 'Runs Allowed', 'key': 'runsAllowed'}, {'display': 'Runs Scored', 'key': 'runsScored'}, {'display': 'Division Rank', 'key': 'divisionRank'}, {'display': 'League Rank', 'key': 'leagueRank'}, {'display': 'Sport Rank', 'key': 'sportRank'}]\n  // if(loading) return 0;\n\n  return React.createElement(\"div\", {\n    className: \"stats-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, React.createElement(SeasonRecord, {\n    theme: theme,\n    stats: stats,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }));\n}","map":{"version":3,"sources":["/Users/cooperjones/Documents/_Object/mlb-final-project-react/src/Stats.js"],"names":["React","useState","useEffect","StatBlock","SeasonRecord","axios","Stats","theme","id","year","teamInfoUrl","stats","setStats","loading","setLoading","cancel","get","cancelToken","CancelToken","c","then","res","i","data","records","length","j","teamRecords","team","parseInt","console","log","catch","err"],"mappings":";;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,eAAe,SAASC,KAAT,CAAe;AAACC,EAAAA,KAAD;AAAQC,EAAAA,EAAR;AAAYC,EAAAA,IAAZ;AAAkBC,EAAAA;AAAlB,CAAf,EAA8C;AAC3D;AACA;AAF2D,oBAGjCT,QAAQ,CAAC;AACjC,YAAO,GAD0B;AAEjC,cAAS,GAFwB;AAGjC,yBAAoB,GAHa;AAIjC,uBAAkB,GAJe;AAKjC,eAAU;AACR,sBAAe,CAAC;AAAC,gBAAO,EAAR;AAAW,kBAAS;AAApB,OAAD,EAAyB;AAAC,gBAAO,EAAR;AAAW,kBAAS;AAApB,OAAzB,EAAiD;AAAC,gBAAO,EAAR;AAAW,kBAAS;AAApB,OAAjD,EAAyE;AAAC,gBAAO,EAAR;AAAW,kBAAS;AAApB,OAAzE,EAAiG;AAAC,gBAAO,EAAR;AAAW,kBAAS;AAApB,OAAjG;AADP;AALuB,GAAD,CAHyB;AAAA;AAAA,QAGpDU,KAHoD;AAAA,QAG7CC,QAH6C;;AAAA,qBAY7BX,QAAQ,CAAC,IAAD,CAZqB;AAAA;AAAA,QAYpDY,OAZoD;AAAA,QAY3CC,UAZ2C;;AAc3DZ,EAAAA,SAAS,CAAC,MAAM;AACdY,IAAAA,UAAU,CAAC,IAAD,CAAV,CADc,CAEd;;AACA,QAAIC,MAAJ;AACAV,IAAAA,KAAK,CAACW,GAAN,CAAUN,WAAV,EAAuB;AACrBO,MAAAA,WAAW,EAAE,IAAIZ,KAAK,CAACa,WAAV,CAAsBC,CAAC,IAAIJ,MAAM,GAAGI,CAApC;AADQ,KAAvB,EAGCC,IAHD,CAGMC,GAAG,IAAI;AACXP,MAAAA,UAAU,CAAC,KAAD,CAAV,CADW,CAEX;AACA;;AACA,WAAI,IAAIQ,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGD,GAAG,CAACE,IAAJ,CAASC,OAAT,CAAiBC,MAApC,EAA4CH,CAAC,EAA7C,EAAgD;AAC9C,aAAI,IAAII,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAACL,GAAG,CAACE,IAAJ,CAASC,OAAT,CAAiBF,CAAjB,EAAoBK,WAApB,CAAgCF,MAAjD,EAAyDC,CAAC,EAA1D,EAA6D;AAC3D;AACA;AACA;AACA,cAAGL,GAAG,CAACE,IAAJ,CAASC,OAAT,CAAiBF,CAAjB,EAAoBK,WAApB,CAAgCD,CAAhC,EAAmCE,IAAnC,CAAwCpB,EAAxC,KAA+CqB,QAAQ,CAACrB,EAAD,CAA1D,EAA+D;AAC7DsB,YAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACAnB,YAAAA,QAAQ,CAACS,GAAG,CAACE,IAAJ,CAASC,OAAT,CAAiBF,CAAjB,EAAoBK,WAApB,CAAgCD,CAAhC,CAAD,CAAR;AACD;AACF;AACF;AACF,KAlBD,EAmBCM,KAnBD,CAmBOC,GAAG,IAAG;AACXnB,MAAAA,UAAU,CAAC,KAAD,CAAV;AACAF,MAAAA,QAAQ,CAAC;AACP,gBAAO,EADA;AAEP,kBAAS,EAFF;AAGP,6BAAoB,EAHb;AAIP,2BAAkB,EAJX;AAKP,mBAAU;AACR,0BAAe,CAAC;AAAC,oBAAO,EAAR;AAAW,sBAAS;AAApB,WAAD,EAAyB;AAAC,oBAAO,EAAR;AAAW,sBAAS;AAApB,WAAzB,EAAiD;AAAC,oBAAO,EAAR;AAAW,sBAAS;AAApB,WAAjD,EAAyE;AAAC,oBAAO,EAAR;AAAW,sBAAS;AAApB,WAAzE,EAAiG;AAAC,oBAAO,EAAR;AAAW,sBAAS;AAApB,WAAjG;AADP;AALH,OAAD,CAAR,CAFW,CAWX;AACA;AACD,KAhCD;AAiCA,WAAO,MAAMG,MAAM,EAAnB;AACD,GAtCQ,EAsCN,CAACN,IAAD,EAAOD,EAAP,CAtCM,CAAT,CAd2D,CAqD3D;AACA;AACA;;AACA,SACE;AAAK,IAAA,SAAS,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,YAAD;AAAc,IAAA,KAAK,EAAED,KAArB;AAA4B,IAAA,KAAK,EAAEI,KAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF;AAKD","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport StatBlock from './StatBlock';\nimport SeasonRecord from './SeasonRecord';\nimport axios from 'axios';\n\nexport default function Stats({theme, id, year, teamInfoUrl}){\n  // const [teamInfoUrl, setTeamInfoUrl] = useState(\"http://statsapi.mlb.com/api/v1/standings/regularSeason?leagueId=103,104&season=\" + year);\n  // console.log(id +\" \" + year);\n  const [stats, setStats] = useState({\n    \"wins\":\"-\",\n    \"losses\":\"-\",\n    \"winningPercentage\":\"-\",\n    \"leagueGamesBack\":\"-\",\n    \"records\":{\n      \"splitRecords\":[{\"wins\":\"\",\"losses\":\"\"},{\"wins\":\"\",\"losses\":\"\"},{\"wins\":\"\",\"losses\":\"\"},{\"wins\":\"\",\"losses\":\"\"},{\"wins\":\"\",\"losses\":\"\"}]\n    }\n  });\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    setLoading(true);\n    // console.log(teamInfoUrl);\n    let cancel;\n    axios.get(teamInfoUrl, {\n      cancelToken: new axios.CancelToken(c => cancel = c)\n    })\n    .then(res => {\n      setLoading(false);\n      // console.log(teamInfoUrl);\n      // console.log(res.data.records);\n      for(var i = 0; i < res.data.records.length; i++){\n        for(var j = 0; j<res.data.records[i].teamRecords.length; j++){\n          // console.log(res.data.records[i].teamRecords[j].team.id + \": \");\n          // console.log(typeof res.data.records[i].teamRecords[j].team.id);\n          // console.log(typeof id);\n          if(res.data.records[i].teamRecords[j].team.id === parseInt(id)){\n            console.log(\"match\");\n            setStats(res.data.records[i].teamRecords[j]);\n          }\n        }\n      }\n    })\n    .catch(err =>{\n      setLoading(false);\n      setStats({\n        \"wins\":\"\",\n        \"losses\":\"\",\n        \"winningPercentage\":\"\",\n        \"leagueGamesBack\":\"\",\n        \"records\":{\n          \"splitRecords\":[{\"wins\":\"\",\"losses\":\"\"},{\"wins\":\"\",\"losses\":\"\"},{\"wins\":\"\",\"losses\":\"\"},{\"wins\":\"\",\"losses\":\"\"},{\"wins\":\"\",\"losses\":\"\"}]\n        }\n      });\n      // console.log(err.message);\n      // return err.message;\n    })\n    return () => cancel()\n  }, [year, id])\n  // console.log(stats);\n  // const stats_being_displayed = [{'display': 'Games Played', 'key': 'gamesPlayed'}, {'display': 'Wins', 'key': 'wins'}, {'display': 'Losses', 'key': 'losses'}, {'display': 'Win %', 'key': 'winningPercentage'}, {'display': 'Runs Allowed', 'key': 'runsAllowed'}, {'display': 'Runs Scored', 'key': 'runsScored'}, {'display': 'Division Rank', 'key': 'divisionRank'}, {'display': 'League Rank', 'key': 'leagueRank'}, {'display': 'Sport Rank', 'key': 'sportRank'}]\n  // if(loading) return 0;\n  return(\n    <div className=\"stats-container\">\n      <SeasonRecord theme={theme} stats={stats}/>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}