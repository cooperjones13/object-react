{"ast":null,"code":"const fs = require('fs');\n\nconst debug = require('debug');\n\nconst logger = debug('serialport/bindings/unixWrite');\n\nconst _require = require('util'),\n      promisify = _require.promisify;\n\nconst writeAsync = promisify(fs.write);\n\nconst writable = binding => {\n  return new Promise((resolve, reject) => {\n    binding.poller.once('writable', err => err ? reject(err) : resolve());\n  });\n};\n\nmodule.exports = async function unixWrite(buffer, offset) {\n  offset = offset || 0;\n  const bytesToWrite = buffer.length - offset;\n  logger('Starting write', buffer.length, 'bytes offset', offset, 'bytesToWrite', bytesToWrite);\n\n  if (!this.isOpen) {\n    throw new Error('Port is not open');\n  }\n\n  try {\n    const _ref = await writeAsync(this.fd, buffer, offset, bytesToWrite),\n          bytesWritten = _ref.bytesWritten;\n\n    logger('write returned: wrote', bytesWritten, 'bytes');\n\n    if (bytesWritten + offset < buffer.length) {\n      if (!this.isOpen) {\n        throw new Error('Port is not open');\n      }\n\n      return unixWrite.call(this, buffer, bytesWritten + offset);\n    }\n\n    logger('Finished writing', bytesWritten + offset, 'bytes');\n  } catch (err) {\n    logger('write errored', err);\n\n    if (err.code === 'EAGAIN' || err.code === 'EWOULDBLOCK' || err.code === 'EINTR') {\n      if (!this.isOpen) {\n        throw new Error('Port is not open');\n      }\n\n      logger('waiting for writable because of code:', err.code);\n      await writable(this);\n      return unixWrite.call(this, buffer, offset);\n    }\n\n    const disconnectError = err.code === 'EBADF' || // Bad file number means we got closed\n    err.code === 'ENXIO' || // No such device or address probably usb disconnect\n    err.code === 'UNKNOWN' || err.errno === -1; // generic error\n\n    if (disconnectError) {\n      err.disconnect = true;\n      logger('disconnecting', err);\n    }\n\n    logger('error', err);\n    throw err;\n  }\n};","map":null,"metadata":{},"sourceType":"script"}