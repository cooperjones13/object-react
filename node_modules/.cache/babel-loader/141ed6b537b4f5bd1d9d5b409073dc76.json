{"ast":null,"code":"const _require = require('stream'),\n      Transform = _require.Transform;\n/**\n * Emit data every number of bytes\n * @extends Transform\n * @param {Object} options parser options object\n * @param {Number} options.length the number of bytes on each data event\n * @summary A transform stream that emits data as a buffer after a specific number of bytes are received. Runs in O(n) time.\n * @example\nconst SerialPort = require('serialport')\nconst ByteLength = require('@serialport/parser-byte-length')\nconst port = new SerialPort('/dev/tty-usbserial1')\nconst parser = port.pipe(new ByteLength({length: 8}))\nparser.on('data', console.log) // will have 8 bytes per data event\n */\n\n\nclass ByteLengthParser extends Transform {\n  constructor(options = {}) {\n    super(options);\n\n    if (typeof options.length !== 'number') {\n      throw new TypeError('\"length\" is not a number');\n    }\n\n    if (options.length < 1) {\n      throw new TypeError('\"length\" is not greater than 0');\n    }\n\n    this.length = options.length;\n    this.position = 0;\n    this.buffer = Buffer.alloc(this.length);\n  }\n\n  _transform(chunk, encoding, cb) {\n    let cursor = 0;\n\n    while (cursor < chunk.length) {\n      this.buffer[this.position] = chunk[cursor];\n      cursor++;\n      this.position++;\n\n      if (this.position === this.length) {\n        this.push(this.buffer);\n        this.buffer = Buffer.alloc(this.length);\n        this.position = 0;\n      }\n    }\n\n    cb();\n  }\n\n  _flush(cb) {\n    this.push(this.buffer.slice(0, this.position));\n    this.buffer = Buffer.alloc(this.length);\n    cb();\n  }\n\n}\n\nmodule.exports = ByteLengthParser;","map":null,"metadata":{},"sourceType":"script"}