{"ast":null,"code":"const _require = require('stream'),\n      Transform = _require.Transform;\n/**\n * Parse the CCTalk protocol\n * @extends Transform\n * @summary A transform stream that emits CCTalk packets as they are received.\n * @example\nconst SerialPort = require('serialport')\nconst CCTalk = require('@serialport/parser-cctalk')\nconst port = new SerialPort('/dev/ttyUSB0')\nconst parser = port.pipe(new CCtalk())\nparser.on('data', console.log)\n */\n\n\nclass CCTalkParser extends Transform {\n  constructor(maxDelayBetweenBytesMs = 50) {\n    super();\n    this.array = [];\n    this.cursor = 0;\n    this.lastByteFetchTime = 0;\n    this.maxDelayBetweenBytesMs = maxDelayBetweenBytesMs;\n  }\n\n  _transform(buffer, _, cb) {\n    if (this.maxDelayBetweenBytesMs > 0) {\n      const now = Date.now();\n\n      if (now - this.lastByteFetchTime > this.maxDelayBetweenBytesMs) {\n        this.array = [];\n        this.cursor = 0;\n      }\n\n      this.lastByteFetchTime = now;\n    }\n\n    this.cursor += buffer.length; // TODO: Better Faster es7 no supported by node 4\n    // ES7 allows directly push [...buffer]\n    // this.array = this.array.concat(Array.from(buffer)) //Slower ?!?\n\n    Array.from(buffer).map(byte => this.array.push(byte));\n\n    while (this.cursor > 1 && this.cursor >= this.array[1] + 5) {\n      // full frame accumulated\n      // copy command from the array\n      const FullMsgLength = this.array[1] + 5;\n      const frame = Buffer.from(this.array.slice(0, FullMsgLength)); // Preserve Extra Data\n\n      this.array = this.array.slice(frame.length, this.array.length);\n      this.cursor -= FullMsgLength;\n      this.push(frame);\n    }\n\n    cb();\n  }\n\n}\n\nmodule.exports = CCTalkParser;","map":null,"metadata":{},"sourceType":"script"}