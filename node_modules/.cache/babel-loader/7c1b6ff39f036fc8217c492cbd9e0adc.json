{"ast":null,"code":"const _require = require('stream'),\n      Transform = _require.Transform;\n/**\n * A transform stream that waits for a sequence of \"ready\" bytes before emitting a ready event and emitting data events\n * @summary To use the `Ready` parser provide a byte start sequence. After the bytes have been received a ready event is fired and data events are passed through.\n * @extends Transform\n * @example\nconst SerialPort = require('serialport')\nconst Ready = require('@serialport/parser-ready')\nconst port = new SerialPort('/dev/tty-usbserial1')\nconst parser = port.pipe(new Ready({ delimiter: 'READY' }))\nparser.on('ready', () => console.log('the ready byte sequence has been received'))\nparser.on('data', console.log) // all data after READY is received\n */\n\n\nclass ReadyParser extends Transform {\n  /**\n   *\n   * @param {object} options options for the parser\n   * @param {string|Buffer|array} options.delimiter data to look for before emitted \"ready\"\n   */\n  constructor(options = {}) {\n    if (options.delimiter === undefined) {\n      throw new TypeError('\"delimiter\" is not a bufferable object');\n    }\n\n    if (options.delimiter.length === 0) {\n      throw new TypeError('\"delimiter\" has a 0 or undefined length');\n    }\n\n    super(options);\n    this.delimiter = Buffer.from(options.delimiter);\n    this.readOffset = 0;\n    this.ready = false;\n  }\n\n  _transform(chunk, encoding, cb) {\n    if (this.ready) {\n      this.push(chunk);\n      return cb();\n    }\n\n    const delimiter = this.delimiter;\n    let chunkOffset = 0;\n\n    while (this.readOffset < delimiter.length && chunkOffset < chunk.length) {\n      if (delimiter[this.readOffset] === chunk[chunkOffset]) {\n        this.readOffset++;\n      } else {\n        this.readOffset = 0;\n      }\n\n      chunkOffset++;\n    }\n\n    if (this.readOffset === delimiter.length) {\n      this.ready = true;\n      this.emit('ready');\n      const chunkRest = chunk.slice(chunkOffset);\n\n      if (chunkRest.length > 0) {\n        this.push(chunkRest);\n      }\n    }\n\n    cb();\n  }\n\n}\n\nmodule.exports = ReadyParser;","map":null,"metadata":{},"sourceType":"script"}