{"ast":null,"code":"import _slicedToArray from \"/Users/cooperjones/Documents/_Object/mlb-final-project-react/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/cooperjones/Documents/_Object/mlb-final-project-react/src/PostseasonResults.js\";\n//\"http://statsapi.mlb.com/api/v1/stats?stats=season&teamId=113&group=hitting&season=1999\"\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nexport default function PostseasonResults({\n  theme,\n  season,\n  teamId,\n  stats,\n  division\n}) {\n  // console.log(stats);\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        messages = _useState2[0],\n        setMessages = _useState2[1];\n\n  const style = {\n    \"backgroundColor\": theme.accentColor,\n    \"color\": \"#ffffff\"\n  };\n  useEffect(() => {\n    if (stats.clinchIndicator !== \"\") {\n      let cancel;\n      axios.get(\"https://statsapi.mlb.com/api/v1/schedule/postseason/series?sportId=1&season=\" + season + \"&hydrate=seriesStatus(useOverride=true)\", {\n        cancelToken: new axios.CancelToken(c => cancel = c)\n      }).then(res => {\n        console.log(res.data);\n        let msg = [];\n\n        switch (stats.clinchIndicator) {\n          case \"z\":\n            msg.push(\"Best Record in League\");\n            break;\n\n          case \"w\":\n            msg.push(\"Clinched Wild Card\");\n            break;\n\n          case \"y\":\n            msg.push(\"Clinched Division \" + division);\n            break;\n\n          default:\n            msg.push(\"Did Not Advance to Postseason\");\n        }\n\n        for (let i = 1; i < res.data.series.length; i++) {\n          let seriesStatus = res.data.series[i].games[res.data.series[i].games.length - 1].seriesStatus;\n          console.log(teamId);\n\n          if (seriesStatus.winningTeam.id === teamId) {\n            msg.push(seriesStatus.result);\n          }\n\n          if (seriesStatus.losingTeam.id === teamId) {\n            msg.push(\"Loses \" + seriesStatus.shortName + \" to \" + seriesStatus.result.slice(0, 3));\n          }\n        }\n\n        if (res.data.series[0].games[res.data.series[0].games.length - 1].seriesStatus.winningTeam.id === teamId) {\n          msg.push(res.data.series[0].games[res.data.series[0].games.length - 1].seriesStatus.result);\n        }\n\n        if (res.data.series[0].games[res.data.series[0].games.length - 1].seriesStatus.losingTeam.id === teamId) {\n          msg.push(\"Lost World Series to \" + res.data.series[0].games[res.data.series[0].games.length - 1].seriesStatus.result.slice(0, 3));\n        }\n\n        if (msg.length === 0) {\n          msg.push();\n        }\n\n        setMessages(msg);\n      }).catch(err => {\n        console.log(\"yo this is not working\");\n        console.log(err);\n      });\n      return () => cancel();\n    } else {\n      setMessages([\"Did Not Advance to Postseason\"]);\n    }\n  }, [season, teamId, stats, messages]); // console.log(top3);\n\n  return React.createElement(\"div\", {\n    className: \"stat-block\",\n    id: \"postseason-results\",\n    style: style,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, \"Postseason \", season), messages.map(msg => React.createElement(\"h3\", {\n    key: msg,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, msg)));\n}","map":{"version":3,"sources":["/Users/cooperjones/Documents/_Object/mlb-final-project-react/src/PostseasonResults.js"],"names":["React","useState","useEffect","axios","PostseasonResults","theme","season","teamId","stats","division","messages","setMessages","style","accentColor","clinchIndicator","cancel","get","cancelToken","CancelToken","c","then","res","console","log","data","msg","push","i","series","length","seriesStatus","games","winningTeam","id","result","losingTeam","shortName","slice","catch","err","map"],"mappings":"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","sourcesContent":["//\"http://statsapi.mlb.com/api/v1/stats?stats=season&teamId=113&group=hitting&season=1999\"\n\nimport React, {useState, useEffect} from 'react';\nimport axios from 'axios';\n\nexport default function PostseasonResults({theme, season, teamId, stats, division}){\n  // console.log(stats);\n\n  const [messages, setMessages] = useState([]);\n\n  const style = {\n    \"backgroundColor\":theme.accentColor,\n    \"color\": \"#ffffff\"\n  }\n\n  useEffect(() => {\n    if(stats.clinchIndicator !== \"\"){\n\n        let cancel;\n        axios.get(\"https://statsapi.mlb.com/api/v1/schedule/postseason/series?sportId=1&season=\"+ season+ \"&hydrate=seriesStatus(useOverride=true)\", {\n        cancelToken: new axios.CancelToken(c => cancel = c)\n        })\n        .then(res => {\n        console.log(res.data);\n        let msg = [];\n        switch(stats.clinchIndicator) {\n            case \"z\":\n                msg.push(\"Best Record in League\");\n                break;\n            case \"w\":\n                msg.push(\"Clinched Wild Card\");\n                break;\n            case \"y\":\n                msg.push(\"Clinched Division \"+ division);\n                break;  \n            default:\n              msg.push(\"Did Not Advance to Postseason\");\n          }\n        for(let i = 1; i < res.data.series.length; i++){\n            \n            let seriesStatus = res.data.series[i].games[res.data.series[i].games.length-1].seriesStatus;\n            console.log(teamId)\n            if(seriesStatus.winningTeam.id === teamId){\n                msg.push(seriesStatus.result);\n            }\n            if(seriesStatus.losingTeam.id === teamId){\n                msg.push(\"Loses \" + seriesStatus.shortName + \" to \" + seriesStatus.result.slice(0,3));\n            }\n        }\n        if(res.data.series[0].games[res.data.series[0].games.length-1].seriesStatus.winningTeam.id === teamId){\n            msg.push(res.data.series[0].games[res.data.series[0].games.length-1].seriesStatus.result);\n        }\n        if(res.data.series[0].games[res.data.series[0].games.length-1].seriesStatus.losingTeam.id === teamId){\n            msg.push(\"Lost World Series to \" + res.data.series[0].games[res.data.series[0].games.length-1].seriesStatus.result.slice(0,3));\n        }\n        if (msg.length === 0){msg.push()}\n        setMessages(msg);\n        })\n        .catch(err =>{\n        console.log(\"yo this is not working\");\n        console.log(err);\n        })\n        return () => cancel()\n    }\n    else{\n        setMessages([\"Did Not Advance to Postseason\"])\n    }\n  }, [season, teamId, stats, messages])\n  // console.log(top3);\n\n  return(\n    <div className=\"stat-block\" id=\"postseason-results\" style={style}>\n        <h2>Postseason {season}</h2>\n        {messages.map(msg => (\n            <h3 key={msg}>{msg}</h3>\n        ))\n        }\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}