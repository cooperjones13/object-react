{"ast":null,"code":"const childProcess = require('child_process');\n\nconst Readline = require('@serialport/parser-readline'); // get only serial port names\n\n\nfunction checkPathOfDevice(path) {\n  return /(tty(S|WCH|ACM|USB|AMA|MFD|O|XRUSB)|rfcomm)/.test(path) && path;\n}\n\nfunction propName(name) {\n  return {\n    DEVNAME: 'path',\n    ID_VENDOR_ENC: 'manufacturer',\n    ID_SERIAL_SHORT: 'serialNumber',\n    ID_VENDOR_ID: 'vendorId',\n    ID_MODEL_ID: 'productId',\n    DEVLINKS: 'pnpId'\n  }[name.toUpperCase()];\n}\n\nfunction decodeHexEscape(str) {\n  return str.replace(/\\\\x([a-fA-F0-9]{2})/g, (a, b) => {\n    return String.fromCharCode(parseInt(b, 16));\n  });\n}\n\nfunction propVal(name, val) {\n  if (name === 'pnpId') {\n    const match = val.match(/\\/by-id\\/([^\\s]+)/);\n    return match && match[1] || undefined;\n  }\n\n  if (name === 'manufacturer') {\n    return decodeHexEscape(val);\n  }\n\n  if (/^0x/.test(val)) {\n    return val.substr(2);\n  }\n\n  return val;\n}\n\nfunction listLinux() {\n  return new Promise((resolve, reject) => {\n    const ports = [];\n    const ude = childProcess.spawn('udevadm', ['info', '-e']);\n    const lines = ude.stdout.pipe(new Readline());\n    ude.on('error', reject);\n    lines.on('error', reject);\n    let port = {};\n    let skipPort = false;\n    lines.on('data', line => {\n      const lineType = line.slice(0, 1);\n      const data = line.slice(3); // new port entry\n\n      if (lineType === 'P') {\n        port = {\n          manufacturer: undefined,\n          serialNumber: undefined,\n          pnpId: undefined,\n          locationId: undefined,\n          vendorId: undefined,\n          productId: undefined\n        };\n        skipPort = false;\n        return;\n      }\n\n      if (skipPort) {\n        return;\n      } // Check dev name and save port if it matches flag to skip the rest of the data if not\n\n\n      if (lineType === 'N') {\n        if (checkPathOfDevice(data)) {\n          ports.push(port);\n        } else {\n          skipPort = true;\n        }\n\n        return;\n      } // parse data about each port\n\n\n      if (lineType === 'E') {\n        const keyValue = data.match(/^(.+)=(.*)/);\n\n        if (!keyValue) {\n          return;\n        }\n\n        const key = propName(keyValue[1]);\n\n        if (!key) {\n          return;\n        }\n\n        port[key] = propVal(key, keyValue[2]);\n      }\n    });\n    lines.on('finish', () => resolve(ports));\n  });\n}\n\nmodule.exports = listLinux;","map":null,"metadata":{},"sourceType":"script"}