{"ast":null,"code":"import _slicedToArray from \"/Users/cooperjones/Documents/_Object/mlb-final-project-react/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/cooperjones/Documents/_Object/mlb-final-project-react/src/PostseasonResults.js\";\n//\"http://statsapi.mlb.com/api/v1/stats?stats=season&teamId=113&group=hitting&season=1999\"\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nexport default function PostseasonResults({\n  theme,\n  season,\n  teamId,\n  stats,\n  division,\n  league\n}) {\n  // console.log(stats);\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        messages = _useState2[0],\n        setMessages = _useState2[1];\n\n  const style = {\n    \"backgroundColor\": theme.accentColor,\n    \"color\": \"#ffffff\"\n  };\n  useEffect(() => {\n    if (stats.clinchIndicator !== \"\") {\n      let cancel;\n      axios.get(\"https://statsapi.mlb.com/api/v1/schedule/postseason/series?sportId=1&season=\" + season + \"&hydrate=seriesStatus(useOverride=true)&SameSite=None\", {\n        cancelToken: new axios.CancelToken(c => cancel = c)\n      }).then(res => {\n        // console.log(res.data);\n        let msg = [];\n\n        switch (stats.clinchIndicator) {\n          case \"z\":\n            msg.push(\"Best Record in \" + league);\n            break;\n\n          case \"w\":\n            msg.push(\"Clinched Wild Card\");\n            break;\n\n          case \"y\":\n            msg.push(\"Clinched Division \" + division);\n            break;\n\n          default:\n            msg.push(\"Did Not Advance to Postseason\");\n            console.log(stats.divisionRank);\n\n            if (typeof parseInt(stats.divisionRank) !== undefined) {\n              msg.push(\"Ranked #\" + stats.divisionRank + \" in \" + division.replace(\"American League\", \"AL\").replace(\"National League\", \"NL\"));\n            } else {\n              msg.push(\"Ranked #\" + stats.leagueRank + \" in \" + league.replace(\"American League\", \"AL\").replace(\"National League\", \"NL\"));\n            }\n\n            setMessages(msg);\n            break;\n        }\n\n        for (let i = 1; i < res.data.series.length; i++) {\n          // console.log(typeof teamId);\n          let seriesStatus = res.data.series[i].games[res.data.series[i].games.length - 1].seriesStatus; // console.log(typeof seriesStatus.winningTeam.id);\n\n          if (seriesStatus.winningTeam.id === parseInt(teamId)) {\n            msg.push(seriesStatus.result);\n          }\n\n          if (seriesStatus.losingTeam.id === parseInt(teamId)) {\n            msg.push(\"Loses \" + seriesStatus.shortName + \" to \" + seriesStatus.result.slice(0, 3));\n          }\n        }\n\n        if (res.data.series[0].games[res.data.series[0].games.length - 1].seriesStatus.winningTeam.id === parseInt(teamId)) {\n          msg.push(res.data.series[0].games[res.data.series[0].games.length - 1].seriesStatus.result);\n        }\n\n        if (res.data.series[0].games[res.data.series[0].games.length - 1].seriesStatus.losingTeam.id === parseInt(teamId)) {\n          msg.push(\"Lost World Series to \" + res.data.series[0].games[res.data.series[0].games.length - 1].seriesStatus.result.slice(0, 3));\n        }\n\n        setMessages(msg);\n      }).catch(err => {\n        console.log(err);\n      });\n      return () => cancel();\n    } else {\n      setMessages([\"Did Not Advance to Postseason\"]);\n    }\n  }, [season, teamId, stats, division, league]); // console.log(top3);\n\n  return React.createElement(\"div\", {\n    className: \"stat-block\",\n    id: \"postseason-results\",\n    style: style,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }, \"Postseason\"), messages.map(msg => React.createElement(\"h3\", {\n    key: msg,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, msg)));\n}","map":{"version":3,"sources":["/Users/cooperjones/Documents/_Object/mlb-final-project-react/src/PostseasonResults.js"],"names":["React","useState","useEffect","axios","PostseasonResults","theme","season","teamId","stats","division","league","messages","setMessages","style","accentColor","clinchIndicator","cancel","get","cancelToken","CancelToken","c","then","res","msg","push","console","log","divisionRank","parseInt","undefined","replace","leagueRank","i","data","series","length","seriesStatus","games","winningTeam","id","result","losingTeam","shortName","slice","catch","err","map"],"mappings":"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","sourcesContent":["//\"http://statsapi.mlb.com/api/v1/stats?stats=season&teamId=113&group=hitting&season=1999\"\n\nimport React, {useState, useEffect} from 'react';\nimport axios from 'axios';\n\nexport default function PostseasonResults({theme, season, teamId, stats, division, league}){\n  // console.log(stats);\n\n  const [messages, setMessages] = useState([]);\n  const style = {\n    \"backgroundColor\":theme.accentColor,\n    \"color\": \"#ffffff\"\n  }\n\n  useEffect(() => {\n    if(stats.clinchIndicator !== \"\"){\n\n        let cancel;\n        axios.get(\"https://statsapi.mlb.com/api/v1/schedule/postseason/series?sportId=1&season=\"+ season+ \"&hydrate=seriesStatus(useOverride=true)&SameSite=None\", {\n            cancelToken: new axios.CancelToken(c => cancel = c)\n        })\n        .then(res => {\n        // console.log(res.data);\n        let msg = [];\n        switch(stats.clinchIndicator) {\n            case \"z\":\n                msg.push(\"Best Record in \"+ league);\n                break;\n            case \"w\":\n                msg.push(\"Clinched Wild Card\");\n                break;\n            case \"y\":\n                msg.push(\"Clinched Division \"+ division);\n                break;  \n            default:\n              msg.push(\"Did Not Advance to Postseason\");\n              console.log(stats.divisionRank);\n              if(typeof parseInt(stats.divisionRank) !== undefined){\n                msg.push(\"Ranked #\"+stats.divisionRank+\" in \"+ division.replace(\"American League\", \"AL\").replace(\"National League\", \"NL\"));\n              } else{\n                msg.push(\"Ranked #\"+stats.leagueRank+\" in \"+ league.replace(\"American League\", \"AL\").replace(\"National League\", \"NL\"));\n                }\n                setMessages(msg);\n              break;\n\n          }\n        for(let i = 1; i < res.data.series.length; i++){\n            // console.log(typeof teamId);\n            let seriesStatus = res.data.series[i].games[res.data.series[i].games.length-1].seriesStatus;\n            // console.log(typeof seriesStatus.winningTeam.id);\n            if(seriesStatus.winningTeam.id === parseInt(teamId)){\n                msg.push(seriesStatus.result);\n            }\n            if(seriesStatus.losingTeam.id === parseInt(teamId)){\n                msg.push(\"Loses \" + seriesStatus.shortName + \" to \" + seriesStatus.result.slice(0,3));\n            }\n        }\n        if(res.data.series[0].games[res.data.series[0].games.length-1].seriesStatus.winningTeam.id === parseInt(teamId)){\n            msg.push(res.data.series[0].games[res.data.series[0].games.length-1].seriesStatus.result);\n        }\n        if(res.data.series[0].games[res.data.series[0].games.length-1].seriesStatus.losingTeam.id === parseInt(teamId)){\n            msg.push(\"Lost World Series to \" + res.data.series[0].games[res.data.series[0].games.length-1].seriesStatus.result.slice(0,3));\n        }\n        setMessages(msg);\n        })\n        .catch(err =>{\n            console.log(err);\n        })\n        return () => cancel()\n    }\n    else{\n        setMessages([\"Did Not Advance to Postseason\"])\n    }\n  }, [season, teamId, stats, division, league])\n  // console.log(top3);\n\n  return(\n    <div className=\"stat-block\" id=\"postseason-results\" style={style}>\n        <h2>Postseason</h2>\n        {messages.map(msg => (\n            <h3 key={msg}>{msg}</h3>\n        ))\n        }\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}